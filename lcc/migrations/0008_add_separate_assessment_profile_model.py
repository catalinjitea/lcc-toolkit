# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2017-11-28 13:30
from __future__ import unicode_literals

from django.core.exceptions import ObjectDoesNotExist
from django.db import migrations, models
import django.db.models.deletion

from lcc.models import (
    AssessmentProfile,
    Country,
    FocusArea,
    LegalSystem,
    PrioritySector,
    Region,
    SubRegion,
)


class CountryMetadata(models.Model):
    """
    This model is defined here so this migration runs with a locked version of
    the model.
    """
    class Meta:
        managed = False

    country = models.ForeignKey('Country', related_name='metadata')
    user = models.ForeignKey('UserProfile', null=True)

    cw = models.BooleanField('Commonwealth (Member country)', default=False)
    small_cw = models.BooleanField('Small commonwealth country', default=False)
    un = models.BooleanField('United Nations (Member state)', default=False)
    ldc = models.BooleanField('Least developed country (LDC)', default=False)
    lldc = models.BooleanField(
        'Landlocked developing country (LLDC)',
        default=False
    )
    sid = models.BooleanField(
        'Small island developing state (SID)',
        default=False
    )

    region = models.ForeignKey(Region, null=True, blank=True)
    sub_region = models.ForeignKey(SubRegion, null=True, blank=True)
    legal_system = models.ForeignKey(LegalSystem, null=True, blank=True)

    population = models.FloatField("Population ('000s) 2018", null=True)
    hdi2015 = models.FloatField('HDI2015', null=True)

    gdp_capita = models.FloatField('GDP per capita, US$ 2016', null=True)
    ghg_no_lucf = models.FloatField(
        'Total GHG Emissions excluding LUCF MtCO2e 2014',
        null=True
    )
    ghg_lucf = models.FloatField(
        'Total GHG Emissions including LUCF MtCO2e 2014',
        null=True
    )
    cvi2015 = models.FloatField(
        'Climate vulnerability index 2015',
        null=True,
        blank=True
    )

    mitigation_focus_areas = models.ManyToManyField(
        FocusArea,
        blank=True
    )

    adaptation_priority_sectors = models.ManyToManyField(
        PrioritySector,
        blank=True
    )


def migrate_data(apps, schema_editor):
    fields = ['cw', 'small_cw', 'un', 'ldc', 'lldc', 'sid', 'region_id',
              'sub_region_id', 'legal_system_id', 'population', 'hdi2015',
              'gdp_capita', 'ghg_no_lucf', 'ghg_lucf', 'cvi2015']
    assessment_profile_fields = list(fields)
    assessment_profile_fields.extend(['country_id', 'user_id'])

    country_metadatas = CountryMetadata.objects.all()
    for country_metadata in country_metadatas:
        if country_metadata.user:
            data = {key: getattr(country_metadata, key) for key in
                    assessment_profile_fields}
            assessment = AssessmentProfile.objects.create(**data)

        else:
            try:
                assessment = Country.objects.get(pk=country_metadata.country_id)
                for key in fields:
                    setattr(assessment, key, getattr(country_metadata, key))
                assessment.save()
            except ObjectDoesNotExist:
                print("Country with pk {id} was not found.".format(
                    id=country_metadata.country_id)
                )

        areas = getattr(country_metadata, 'mitigation_focus_areas').all()
        for area in areas:
            assessment.mitigation_focus_areas.add(area)

        sectors = getattr(country_metadata,
                          'adaptation_priority_sectors').all()
        for sector in sectors:
            assessment.adaptation_priority_sectors.add(sector)


class Migration(migrations.Migration):

    dependencies = [
        ('lcc', '0007_auto_20171106_1347'),
    ]

    operations = [
        migrations.CreateModel(
            name='AssessmentProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('cw', models.BooleanField(
                    default=False, verbose_name='Commonwealth (Member country)')
                 ),
                ('small_cw', models.BooleanField(
                    default=False, verbose_name='Small commonwealth country')
                 ),
                ('un', models.BooleanField(
                    default=False,
                    verbose_name='United Nations (Member state)')),
                ('ldc', models.BooleanField(
                    default=False, verbose_name='Least developed country (LDC)')
                 ),
                ('lldc', models.BooleanField(
                    default=False,
                    verbose_name='Landlocked developing country (LLDC)')),
                ('sid', models.BooleanField(
                    default=False,
                    verbose_name='Small island developing state (SID)')),
                ('population', models.FloatField(
                    null=True, verbose_name="Population ('000s) 2018")),
                ('hdi2015', models.FloatField(
                    null=True, verbose_name='HDI2015')),
                ('gdp_capita', models.FloatField(
                    null=True, verbose_name='GDP per capita, US$ 2016')),
                ('ghg_no_lucf', models.FloatField(
                    null=True,
                    verbose_name='Total GHG Emissions excluding LUCF MtCO2e 2014')),
                ('ghg_lucf', models.FloatField(
                    null=True,
                    verbose_name='Total GHG Emissions including LUCF MtCO2e 2014')),
                ('cvi2015', models.FloatField(blank=True, null=True,
                                              verbose_name='Climate vulnerability index 2015')),
                ('adaptation_priority_sectors',
                 models.ManyToManyField(blank=True, to='lcc.PrioritySector')),
            ],
            options={
                'abstract': False,
            },

        ),
        migrations.AddField(
            model_name='country',
            name='adaptation_priority_sectors',
            field=models.ManyToManyField(blank=True, to='lcc.PrioritySector'),
        ),
        migrations.AddField(
            model_name='country',
            name='cvi2015',
            field=models.FloatField(blank=True, null=True,
                                    verbose_name='Climate vulnerability index 2015'),
        ),
        migrations.AddField(
            model_name='country',
            name='cw',
            field=models.BooleanField(default=False,
                                      verbose_name='Commonwealth (Member country)'),
        ),
        migrations.AddField(
            model_name='country',
            name='gdp_capita',
            field=models.FloatField(null=True,
                                    verbose_name='GDP per capita, US$ 2016'),
        ),
        migrations.AddField(
            model_name='country',
            name='ghg_lucf',
            field=models.FloatField(null=True,
                                    verbose_name='Total GHG Emissions including LUCF MtCO2e 2014'),
        ),
        migrations.AddField(
            model_name='country',
            name='ghg_no_lucf',
            field=models.FloatField(null=True,
                                    verbose_name='Total GHG Emissions excluding LUCF MtCO2e 2014'),
        ),
        migrations.AddField(
            model_name='country',
            name='hdi2015',
            field=models.FloatField(null=True, verbose_name='HDI2015'),
        ),
        migrations.AddField(
            model_name='country',
            name='ldc',
            field=models.BooleanField(default=False,
                                      verbose_name='Least developed country (LDC)'),
        ),
        migrations.AddField(
            model_name='country',
            name='legal_system',
            field=models.ForeignKey(blank=True, null=True,
                                    on_delete=django.db.models.deletion.CASCADE,
                                    to='lcc.LegalSystem'),
        ),
        migrations.AddField(
            model_name='country',
            name='lldc',
            field=models.BooleanField(default=False,
                                      verbose_name='Landlocked developing country (LLDC)'),
        ),
        migrations.AddField(
            model_name='country',
            name='mitigation_focus_areas',
            field=models.ManyToManyField(blank=True, to='lcc.FocusArea'),
        ),
        migrations.AddField(
            model_name='country',
            name='population',
            field=models.FloatField(null=True,
                                    verbose_name="Population ('000s) 2018"),
        ),
        migrations.AddField(
            model_name='country',
            name='region',
            field=models.ForeignKey(blank=True, null=True,
                                    on_delete=django.db.models.deletion.CASCADE,
                                    to='lcc.Region'),
        ),
        migrations.AddField(
            model_name='country',
            name='sid',
            field=models.BooleanField(default=False,
                                      verbose_name='Small island developing state (SID)'),
        ),
        migrations.AddField(
            model_name='country',
            name='small_cw',
            field=models.BooleanField(default=False,
                                      verbose_name='Small commonwealth country'),
        ),
        migrations.AddField(
            model_name='country',
            name='sub_region',
            field=models.ForeignKey(blank=True, null=True,
                                    on_delete=django.db.models.deletion.CASCADE,
                                    to='lcc.SubRegion'),
        ),
        migrations.AddField(
            model_name='country',
            name='un',
            field=models.BooleanField(default=False,
                                      verbose_name='United Nations (Member state)'),
        ),
        migrations.AddField(
            model_name='assessmentprofile',
            name='country',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                    related_name='metadata', to='lcc.Country'),
        ),
        migrations.AddField(
            model_name='assessmentprofile',
            name='legal_system',
            field=models.ForeignKey(blank=True, null=True,
                                    on_delete=django.db.models.deletion.CASCADE,
                                    to='lcc.LegalSystem'),
        ),
        migrations.AddField(
            model_name='assessmentprofile',
            name='mitigation_focus_areas',
            field=models.ManyToManyField(blank=True, to='lcc.FocusArea'),
        ),
        migrations.AddField(
            model_name='assessmentprofile',
            name='region',
            field=models.ForeignKey(blank=True, null=True,
                                    on_delete=django.db.models.deletion.CASCADE,
                                    to='lcc.Region'),
        ),
        migrations.AddField(
            model_name='assessmentprofile',
            name='sub_region',
            field=models.ForeignKey(blank=True, null=True,
                                    on_delete=django.db.models.deletion.CASCADE,
                                    to='lcc.SubRegion'),
        ),
        migrations.AddField(
            model_name='assessmentprofile',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                    to='lcc.UserProfile'),
        ),


        migrations.RunPython(migrate_data),


        migrations.RemoveField(
            model_name='countrymetadata',
            name='adaptation_priority_sectors',
        ),
        migrations.RemoveField(
            model_name='countrymetadata',
            name='country',
        ),
        migrations.RemoveField(
            model_name='countrymetadata',
            name='legal_system',
        ),
        migrations.RemoveField(
            model_name='countrymetadata',
            name='mitigation_focus_areas',
        ),
        migrations.RemoveField(
            model_name='countrymetadata',
            name='region',
        ),
        migrations.RemoveField(
            model_name='countrymetadata',
            name='sub_region',
        ),
        migrations.RemoveField(
            model_name='countrymetadata',
            name='user',
        ),
        migrations.DeleteModel(
            name='CountryMetadata',
        ),
    ]
